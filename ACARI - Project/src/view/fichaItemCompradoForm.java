/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.principalController;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import model.Associados;
import model.ItemComprado;
import model.Materiais;

/**
 *
 * @author Bento
 */
public class fichaItemCompradoForm extends javax.swing.JFrame {

    principalController principalControlador;
    ItemComprado item;
    listaItensCompradosForm listaForm;
    long id_compra_master;

    boolean hasErrors = false;
    String error = "";

    /*
     * Creates new form cadastrarDespesaForm
     */
    public fichaItemCompradoForm(principalController pc, ItemComprado item, long id_compra_master, listaItensCompradosForm listaForm) {
        this.principalControlador = pc;
        this.item = item;
        this.id_compra_master = id_compra_master;
        this.listaForm = listaForm;

        initComponents();

        ArrayList<Associados> listaAssociados = principalControlador.getControladorAssociados().getListaAssociados();
        ArrayList<Materiais> listaMateriais = principalControlador.getControladorMateriais().getListaMateriais();

        //-----------Atualiza lista de associados na combobox-----------
        //Limpa a lista
        associadoComboBox.removeAllItems();

        //Adiciona associados
        for (Associados ass : listaAssociados) {
            associadoComboBox.addItem(ass.getNomeAssociado());
        }

        //Limpa a lista
        materialComboBox.removeAllItems();

        //Adiciona associados
        for (Materiais mat : listaMateriais) {
            materialComboBox.addItem(mat.getMaterialNome());
        }

        //-----------Inicializa valores---------------------------------
        if (item != null) {
            associadoComboBox.setSelectedIndex(
                    findSelectedIndex(
                            principalControlador.getControladorAssociados().buscaAssociadoID(
                                    principalControlador.getControladorCompras().getCompra(item.getId_compra()).getIdAssociado()
                            ).getNomeAssociado(), associadoComboBox
                    )
            );
            quantidadeTextField.setText(String.valueOf(item.getQuantidade()));
            precoKGTextField.setText(String.valueOf(item.getPreco_kg()));
            materialComboBox.setSelectedIndex(
                    findSelectedIndex(
                            principalControlador.getControladorMateriais().buscaMaterialID(
                                    item.getId_material()
                            ).getMaterialNome(), materialComboBox
                    )
            );
            precoTotalTextField.setText(String.valueOf(item.getPreco_total()));
        }

        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    //Busca o index de um tal elemento da comboBox
    private int findSelectedIndex(String s, JComboBox cb) {
        for (int i = 0; i < cb.getItemCount(); i++) {
            if (cb.getItemAt(i).toString().equals(s)) {
                return i;
            }
        }
        return -1;//É nula a chance de retorno -1
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        precoKGTextField = new javax.swing.JTextField();
        confirmarItemCompradoButton = new javax.swing.JButton();
        cancelarItemCompradoButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        materialComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        quantidadeTextField = new javax.swing.JTextField();
        precoTotalTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        associadoComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ficha de Item Comprado");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Material*:");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Quantidade*:");

        precoKGTextField.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        precoKGTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        precoKGTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                precoKGTextFieldFocusLost(evt);
            }
        });

        confirmarItemCompradoButton.setBackground(new java.awt.Color(1, 103, 204));
        confirmarItemCompradoButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        confirmarItemCompradoButton.setForeground(new java.awt.Color(51, 51, 51));
        confirmarItemCompradoButton.setText("Confirmar");
        confirmarItemCompradoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarItemCompradoButtonActionPerformed(evt);
            }
        });

        cancelarItemCompradoButton.setBackground(new java.awt.Color(156, 36, 33));
        cancelarItemCompradoButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cancelarItemCompradoButton.setForeground(new java.awt.Color(51, 51, 51));
        cancelarItemCompradoButton.setText("Cancelar");
        cancelarItemCompradoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarItemCompradoButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Os campos marcados com * são obrigatórios! ");

        materialComboBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        materialComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Preço/Kg*:");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Preço Total*:");

        quantidadeTextField.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        quantidadeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantidadeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantidadeTextFieldFocusLost(evt);
            }
        });

        precoTotalTextField.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        precoTotalTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Associado*:");

        associadoComboBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        associadoComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmarItemCompradoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarItemCompradoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(materialComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantidadeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(precoKGTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(precoTotalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(associadoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(associadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(materialComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(precoKGTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(quantidadeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(precoTotalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(confirmarItemCompradoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelarItemCompradoButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmarItemCompradoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarItemCompradoButtonActionPerformed
        //Garante que todos os campos necessarios foram preenchidos e validados
        if (quantidadeTextField.getText().equals("")
                && precoKGTextField.getText().equals("")
                && precoTotalTextField.getText().equals("")) {
            hasErrors = true;
            error += "->Preencha todos campos obrigatórios para concluir o cadastro!\n";
        } else {
            if (Float.parseFloat(quantidadeTextField.getText()) < 0) {
                hasErrors = true;
                error += "->Quantidade invalida!\n";
            }

            if (Float.parseFloat(precoKGTextField.getText()) < 0) {
                hasErrors = true;
                error += "->Preço/Kg invalido!\n";
            }

            if (Float.parseFloat(precoTotalTextField.getText()) < 0) {
                hasErrors = true;
                error += "->Preço Total invalido!\n";
            }
        }

        //Se nao possuir erros o programa procede com o planejado
        if (!hasErrors) {
            if (item == null) {
                //Cadastra um novo associado
                ItemComprado itemComprado = new ItemComprado(
                        principalControlador.getControladorMateriais().buscarMaterial(
                                materialComboBox.getItemAt(materialComboBox.getSelectedIndex()
                                )
                        ).getIdMaterial(),
                        id_compra_master,
                        Double.parseDouble(quantidadeTextField.getText()),
                        Double.parseDouble(precoKGTextField.getText()),
                        Double.parseDouble(precoTotalTextField.getText())
                );

                for (ItemComprado i : principalControlador.getControladorCompras().getItensFromCompraID(id_compra_master)) {
                    if (itemComprado.getId_material() == i.getId_material()) {
                        if (itemComprado.getPreco_kg() == i.getPreco_kg()) {
                            itemComprado.setPreco_total(i.getPreco_kg() * (i.getQuantidade() + itemComprado.getQuantidade()));
                        } else {
                            int option = JOptionPane.showConfirmDialog(null, "Existe um itemComprado no carrinho com o mesmo material, porém com preço por kilo diferente.\n"
                                    + "Yes = Usar o preço Atual (" + itemComprado.getPreco_kg() + ")\n"
                                    + "No = Usar o preço Antigo (" + i.getPreco_kg() + ")\n"
                                    + "Cancel = Cancelar Adição do Item ao carrinho");

                            switch (option) {
                                case 0:
                                    itemComprado.setPreco_total(i.getPreco_kg() * (i.getQuantidade() + itemComprado.getQuantidade()));
                                    break;
                                case 1:
                                    itemComprado.setPreco_kg(i.getPreco_kg());
                                    break;
                                case 2:
                                    return;
                            }
                        }
                        itemComprado.setQuantidade(i.getQuantidade() + itemComprado.getQuantidade());
                        itemComprado.setPreco_total(itemComprado.getPreco_kg() * itemComprado.getQuantidade());
                        principalControlador.getControladorCompras().editarItem(i, itemComprado);
                    }
                }

                //Confirma cadastro
                JOptionPane.showMessageDialog(null, "Cadastro Concluido com Sucesso!");
                //Pergunta se quer cadastrar mais um
                if (JOptionPane.showConfirmDialog(null, "Deseja cadastrar outra Despesa?") == JOptionPane.YES_OPTION) {
                    quantidadeTextField.setText("");
                    precoKGTextField.setText("");
                    precoTotalTextField.setText("");
                } else {
                    this.dispose();//Fecha a tela caso não queira fazer mais nenhum cadastro
                }
            } else {
                //Edita um associado, enviando o antigo registro do mesmo e o novo registro para troca
                principalControlador.getControladorCompras().editarItem(
                        item,
                        new ItemComprado(
                                principalControlador.getControladorMateriais().buscarMaterial(
                                        materialComboBox.getItemAt(materialComboBox.getSelectedIndex()
                                        )
                                ).getIdMaterial(),
                                id_compra_master,
                                Double.parseDouble(quantidadeTextField.getText()),
                                Double.parseDouble(precoKGTextField.getText()),
                                Double.parseDouble(precoTotalTextField.getText())
                        )
                );
                //Confirma cadastro
                JOptionPane.showMessageDialog(null, "Edição Concluida com Sucesso!");
                this.dispose();//Fecha a tela caso não queira fazer mais nenhum cadastro
            }

            //Atualiza tabela na view principal
            listaForm.preencherTabela();
        } else {
            //Mostra erros
            JOptionPane.showMessageDialog(null, error);
        }
    }//GEN-LAST:event_confirmarItemCompradoButtonActionPerformed

    private void cancelarItemCompradoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarItemCompradoButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelarItemCompradoButtonActionPerformed

    private void quantidadeTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantidadeTextFieldFocusLost
        //Verifica se os campos não estao vazios, caso esteja, o programa insere um 0
        if (quantidadeTextField.getText().equals("")) {
            quantidadeTextField.setText("0");
        }
        if (precoKGTextField.getText().equals("")) {
            precoKGTextField.setText("0");
        }

        quantidadeTextField.setText(String.valueOf(Float.parseFloat(quantidadeTextField.getText())));
        precoKGTextField.setText(String.valueOf(Float.parseFloat(precoKGTextField.getText())));

        float pt = Float.parseFloat(quantidadeTextField.getText()) * Float.parseFloat(precoKGTextField.getText());
        System.out.println(pt);
        precoTotalTextField.setText(String.valueOf(pt));
    }//GEN-LAST:event_quantidadeTextFieldFocusLost

    private void precoKGTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_precoKGTextFieldFocusLost
        //Verifica se os campos não estao vazios, caso esteja, o programa insere um 0
        if (quantidadeTextField.getText().equals("")) {
            quantidadeTextField.setText("0");
        }
        if (precoKGTextField.getText().equals("")) {
            precoKGTextField.setText("0");
        }

        quantidadeTextField.setText(String.valueOf(Float.parseFloat(quantidadeTextField.getText())));
        precoKGTextField.setText(String.valueOf(Float.parseFloat(precoKGTextField.getText())));

        float pt = Float.parseFloat(quantidadeTextField.getText()) * Float.parseFloat(precoKGTextField.getText());
        System.out.println(pt);
        precoTotalTextField.setText(String.valueOf(pt));
    }//GEN-LAST:event_precoKGTextFieldFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> associadoComboBox;
    private javax.swing.JButton cancelarItemCompradoButton;
    private javax.swing.JButton confirmarItemCompradoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> materialComboBox;
    private javax.swing.JTextField precoKGTextField;
    private javax.swing.JTextField precoTotalTextField;
    private javax.swing.JTextField quantidadeTextField;
    // End of variables declaration//GEN-END:variables
}
